--- sample/sample-config-files/client.conf.orig	2014-11-29 22:59:45.000000000 +0800
+++ sample/sample-config-files/client.conf	2014-12-15 15:32:16.094436634 +0800
@@ -122,3 +122,7 @@
 
 # Silence repeating messages
 ;mute 20
+
+# flow confusion number
+;confusion-num 7
+
--- sample/sample-config-files/server.conf.orig	2014-11-29 22:59:45.000000000 +0800
+++ sample/sample-config-files/server.conf	2014-12-15 15:32:16.098436634 +0800
@@ -302,3 +302,6 @@
 # sequential messages of the same message
 # category will be output to the log.
 ;mute 20
+
+# flow confusion number
+;confusion-num 7
--- sample/sample-windows/sample.ovpn.orig	2014-11-29 22:59:45.000000000 +0800
+++ sample/sample-windows/sample.ovpn	2014-12-15 15:32:16.098436634 +0800
@@ -101,3 +101,7 @@
 # moderate verbosity
 verb 4
 mute 10
+
+# flow confusion number
+;confusion-num 7
+
--- src/openvpn/init.c.orig	2014-11-29 23:00:35.000000000 +0800
+++ src/openvpn/init.c	2014-12-15 15:32:16.098436634 +0800
@@ -2661,7 +2661,8 @@
 			   c->options.rcvbuf,
 			   c->options.sndbuf,
 			   c->options.mark,
-			   sockflags);
+			   sockflags,
+			   c->options.confusion_num);
 }
 
 /*
--- src/openvpn/options.c.orig	2014-11-29 23:00:35.000000000 +0800
+++ src/openvpn/options.c	2014-12-15 15:32:16.102436633 +0800
@@ -7002,6 +7002,10 @@
       options->use_peer_id = true;
       options->peer_id = atoi(p[1]);
     }
+  else if (streq (p[0], "confusion-num") && p[1])
+    {
+      options->confusion_num = atoi(p[1]);
+    }
   else
     {
       int i;
--- src/openvpn/options.h.orig	2014-11-29 23:00:35.000000000 +0800
+++ src/openvpn/options.h	2014-12-15 15:32:16.102436633 +0800
@@ -597,6 +597,8 @@
 
   bool use_peer_id;
   uint32_t peer_id;
+  
+  uint8_t confusion_num;
 };
 
 #define streq(x, y) (!strcmp((x), (y)))
--- src/openvpn/socket.c.orig	2014-11-29 23:00:35.000000000 +0800
+++ src/openvpn/socket.c	2014-12-15 15:28:20.000000000 +0800
@@ -1369,7 +1369,8 @@
 			 int rcvbuf,
 			 int sndbuf,
 			 int mark,
-			 unsigned int sockflags)
+			 unsigned int sockflags,
+			 uint8_t confusion_num)
 {
   ASSERT (sock);
 
@@ -1492,6 +1493,7 @@
       resolve_bind_local (sock);
       resolve_remote (sock, 1, NULL, NULL);
     }
+	sock->confusion_num = confusion_num;
 }
 
 /* finalize socket initialization */
@@ -2619,10 +2621,12 @@
     {
 #ifdef WIN32
       len = socket_finalize (sock->sd, &sock->reads, buf, NULL);
+	  mixup(BPTR (buf), len, sock->confusion_num);
 #else
       struct buffer frag;
       stream_buf_get_next (&sock->stream_buf, &frag);
       len = recv (sock->sd, BPTR (&frag), BLEN (&frag), MSG_NOSIGNAL);
+	  mixup(BPTR (&frag), len, sock->confusion_num);
 #endif
 
       if (!len)
@@ -2726,6 +2730,7 @@
 	  from->pi.in6.ipi6_ifindex = pkti6->ipi6_ifindex;
 	  from->pi.in6.ipi6_addr = pkti6->ipi6_addr;
 	}
+	mixup(BPTR (buf), buf->len, sock->confusion_num);
     }
   return fromlen;
 }
@@ -2749,6 +2754,7 @@
 #endif
     buf->len = recvfrom (sock->sd, BPTR (buf), maxsize, 0,
 			 &from->dest.addr.sa, &fromlen);
+	mixup(BPTR (buf), buf->len, sock->confusion_num);
   if (buf->len >= 0 && expectedlen && fromlen != expectedlen)
     bad_address_length (fromlen, expectedlen);
   return buf->len;
@@ -2770,11 +2776,20 @@
   ASSERT (len <= sock->stream_buf.maxlen);
   len = htonps (len);
   ASSERT (buf_write_prepend (buf, &len, sizeof (len)));
+  int sendlen;
 #ifdef WIN32
-  return link_socket_write_win32 (sock, buf, to);
+  sendlen = link_socket_write_win32 (sock, buf, to);
 #else
-  return link_socket_write_tcp_posix (sock, buf, to);  
+  int mixedbuflen = BLEN (buf);
+  mixup(BPTR (buf), mixedbuflen, sock->confusion_num);
+  sendlen = link_socket_write_tcp_posix (sock, buf, to); 
+  if (sendlen < 0) {
+    mixup(BPTR (buf), mixedbuflen, sock->confusion_num);
+  } else {
+    mixup(BPTR (buf)+sendlen, mixedbuflen-sendlen, sock->confusion_num);
+  } 
 #endif
+  return sendlen;
 }
 
 #if ENABLE_IP_PKTINFO
@@ -2788,6 +2803,7 @@
   struct msghdr mesg;
   struct cmsghdr *cmsg;
   union openvpn_pktinfo opi;
+  int sendlen;
 
   iov.iov_base = BPTR (buf);
   iov.iov_len = BLEN (buf);
@@ -2846,7 +2862,12 @@
       }
     default: ASSERT(0);
     }
-  return sendmsg (sock->sd, &mesg, 0);
+  mixup(BPTR (buf), buf->len, sock->confusion_num);
+  sendlen = sendmsg (sock->sd, &mesg, 0);
+  if (sendlen < 0)
+	mixup(BPTR (buf), buf->len, sock->confusion_num);
+  else
+    mixup(BPTR(buf)+sendlen, buf->len-sendlen, sock->confusion_num);
 }
 
 #endif
@@ -2983,6 +3004,7 @@
       /* Win32 docs say it's okay to allocate the wsabuf on the stack */
       wsabuf[0].buf = BPTR (&sock->writes.buf);
       wsabuf[0].len = BLEN (&sock->writes.buf);
+	  mixup(wsabuf[0].buf, wsabuf[0].len, sock->confusion_num);
 
       /* the overlapped write will signal this event on I/O completion */
       ASSERT (ResetEvent (sock->writes.overlapped.hEvent));
--- src/openvpn/socket.h.orig	2014-11-29 23:00:35.000000000 +0800
+++ src/openvpn/socket.h	2014-12-15 15:19:02.000000000 +0800
@@ -248,6 +248,8 @@
 #ifdef ENABLE_DEBUG
   int gremlin; /* --gremlin bits */
 #endif
+
+  uint8_t confusion_num;
 };
 
 /*
@@ -328,7 +330,8 @@
 			 int rcvbuf,
 			 int sndbuf,
 			 int mark,
-			 unsigned int sockflags);
+			 unsigned int sockflags,
+			 uint8_t confusion_num);
 
 void link_socket_init_phase2 (struct link_socket *sock,
 			      const struct frame *frame,
@@ -532,6 +535,17 @@
 
 extern const int proto_overhead[];
 
+
+static inline void mixup(char *buf, int buflen, uint8_t confusion_num)
+{
+	int i;
+	if (confusion_num) {
+		for (i = 0; i < buflen; i++) {
+			buf[i] ^= confusion_num;
+		}
+	}
+}
+
 static inline int
 datagram_overhead (int proto)
 {
@@ -858,7 +872,9 @@
 			    struct buffer *buf,
 			    struct link_socket_actual *from)
 {
-  return socket_finalize (sock->sd, &sock->reads, buf, from);
+  int recvlen = socket_finalize (sock->sd, &sock->reads, buf, from);
+  mixup(BPTR (buf), recvlen, sock->confusion_num);
+  return recvlen;
 }
 
 #else
@@ -941,6 +957,7 @@
 			     struct buffer *buf,
 			     struct link_socket_actual *to)
 {
+  int sendlen;
 #if ENABLE_IP_PKTINFO
   int link_socket_write_udp_posix_sendmsg (struct link_socket *sock,
 					   struct buffer *buf,
@@ -951,9 +968,17 @@
     return link_socket_write_udp_posix_sendmsg (sock, buf, to);
   else
 #endif
-    return sendto (sock->sd, BPTR (buf), BLEN (buf), 0,
+  {
+    mixup(BPTR (buf), buf->len, sock->confusion_num);
+    sendlen = sendto (sock->sd, BPTR (buf), BLEN (buf), 0,
 		   (struct sockaddr *) &to->dest.addr.sa,
 		   (socklen_t) af_addr_size(to->dest.addr.sa.sa_family));
+	if (sendlen < 0)
+		mixup(BPTR (buf), buf->len, sock->confusion_num);
+	else
+		mixup(BPTR(buf)+sendlen, buf->len-sendlen, sock->confusion_num);
+	return sendlen;
+  }
 }
 
 static inline int
